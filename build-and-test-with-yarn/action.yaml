name: Build and Test
description: Builds and tests code using yarn

inputs:
  checkout-ref:
    description: Ref to checkout from Git
    default: ${{ github.event.pull_request.head.sha }}
    required: false
  sonar-token:
    description: "Token used for pushing test results to SonarCloud.io"
    required: true
  github-token:
    description: Token used for accessing GitHub.com
    required: true
  sonar-project-base-dir:
    description: Use this property when you need the analysis to take place in a directory other than the one from which it was launched.
    default: ./
    required: false
  sonar-organization:
    description: The key of the organization to which the project belongs to
    default: neohelden
    required: false
  sonar-projectKey:
    description: The project's unique key. Allowed characters are letters, numbers, -, _, . and :, with at least one non-digit.
    default: ${{ github.event.repository.name }}
    required: false
  sonar-branch-name:
    description: Branch name to by analyzed. Must be empty for PR builds.
    default: ${{ github.event.ref }}
    required: false
  sonar-sources:
    description: Comma-separated paths to directories containing main source files.
    default: src/
    required: false
  sonar-inclusions:
    description: Comma-delimited path matching patterns defining files to be included in analysis, among those found below directories specified in `sonar.sources`.
    default: "**/*.ts"
    required: false
  sonar-exclusions:
    description: Comma-delimited path matching patterns defining files to be excluded from analysis, among those found below the directories specified in `sonar.sources`.
    default: "**/*.test.ts"
    required: false
  sonar-tests:
    description: Holds a comma-delimited list of directories (not a path matching pattern) relative to the current working directory.
    default: src/
    required: false
  sonar-test-inclusions:
    description: Comma-delimited path matching patterns defining files to be included in analysis, among those found below directories specified in `sonar.tests`. Applied after `sonar.test.exclusions` and therefore overriding it.
    default: "**/*.test.ts"
    required: false
  sonar-test-exclusions:
    description: Comma-delimited path matching patterns defining files to be excluded from analysis, among those found below the directories specified in `sonar.tests`.
    default: ""
    required: false
  sonar-coverage-exclusions:
    description: Comma delimited path matching patterns defining files to be excluded from coverage reporting.
    default: ""
    required: false
  sonar-lcov-reportpaths:
    description: Comma-delimited list of paths to LCOV coverage report files. Paths may be absolute or relative to the project root.
    default: coverage/lcov.info
    required: false
  sonar-verbose:
    description: Debug output for Sonar Scan
    default: "false"
    required: false
  default-branch:
    description: Default development branch of this repository
    default: ${{ github.event.repository.default_branch }}
    required: false
  tsconfig-build-file:
    description: tsconfig file used for building the project.
    default: tsconfig.build.json
    required: false
  prettier-source-paths:
    description: Comma separated list of paths/patterns used by prettier to check
    default: src/**/*.ts
    required: false
  eslint-ext-patterns:
    description: Comma separated list of file patterns eslint will check
    default: .js,.jsx,.ts,.tsx
    required: false
  eslint-configuration-file:
    description: Configuration file used by 'eslint'
    default: .eslintrc
    required: false

runs:
  using: "composite"

  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: "18.x"
    - name: Branch name
      id: extract_branch
      run: |
        BRANCH_NAME=${{ inputs.sonar-branch-name }}

        if [ -n "$BRANCH_NAME" ]
        then
          echo "branch=-Dsonar.branch.name=$(echo ${BRANCH_NAME#refs/heads/})" >> "$GITHUB_OUTPUT"
        else
          echo "branch=" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 ## fix shallow clone detected by SonarCloud.io
        ref: ${{ inputs.checkout-ref }}
        submodules: "true"
        token: ${{ inputs.github-token }}

    - name: Resolve yarn dependencies
      id: yarn-deps
      run: |
        FILE=yarn.lock
        if [ -f "$FILE" ]
        then
          yarn --frozen-lockfile 
        else
          echo "$FILE does not exist - ignoring"
          echo "no-yarn=true" >> "$GITHUB_OUTPUT"
        fi
      working-directory: ./
      shell: bash

    - name: Build Protobuf
      shell: bash
      working-directory: ./
      run: |
        if [ "$(jq -r .scripts.protoc package.json)" = "null" ] && exit
        then
          echo "'protoc' is not configured for this project - ignoring"
        else
          chown -R $(whoami) .
          yarn protoc
        fi

    - name: Prettier
      if: steps.yarn-deps.outputs.no-yarn != 'true'
      run: |
        if [ $(jq -r .devDependencies.prettier package.json) = "null" ] && exit
        then
          echo "'prettier' is not configured for this project - ignoring"
        else
          npx prettier --check "${{ inputs.prettier-source-paths }}"
        fi
      working-directory: ./
      shell: bash

    - name: Test for ESLint
      id: checkEsLint
      run: |
        FILE=${{ inputs.eslint-configuration-file }}
        if [ -f "$FILE" ]
        then
          echo "runEslint=true" >> "$GITHUB_OUTPUT"
        fi
      working-directory: ./
      shell: bash

    - name: ESlint
      if: steps.yarn-deps.outputs.no-yarn != 'true' && steps.checkEsLint.outputs.runEslint == 'true'
      shell: bash
      run: |
        npx eslint . --ext ${{ inputs.eslint-ext-patterns }}

    - name: ESlint Annotate
      if: steps.yarn-deps.outputs.no-yarn != 'true' && steps.checkEsLint.outputs.runEslint == 'true'
      shell: bash
      run: npx eslint --ext ${{ inputs.eslint-ext-patterns }} --output-file eslint_report.json --format json .

    - name: Have files changed?
      id: check_files_changed
      uses: actions/github-script@v6
      with:
        script: |
          if ( !context.issue || !context.issue.number ){
            console.log("Push event supressed");
            return 'true';
          }
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const files = pr.data.changed_files;
          if (files.length > 0) {
            return 'true';
          }
          return 'false';

    - name: Annotate Code Linting Results
      if: steps.yarn-deps.outputs.no-yarn != 'true' && steps.checkEsLint.outputs.runEslint == 'true' && github.event_name == 'pull_request' && steps.check_files_changed.result == 'true'
      uses: ataylorme/eslint-annotate-action@1.2.0
      with:
        repo-token: "${{ inputs.github-token }}"
        report-json: "eslint_report.json"

    - name: Build
      run: |
        FILE=${{ inputs.tsconfig-build-file }}

        if [ -f "$FILE" ]
        then
          npx tsc -p "$FILE"
        else
          echo "$FILE does not exist - ignoring"
        fi
      working-directory: ./
      shell: bash

    - name: Test
      id: test
      if: steps.yarn-deps.outputs.no-yarn != 'true'
      run: |
        if [ $(jq -r .devDependencies.jest package.json) = "null" ] && exit
        then
          echo "'jest' is not configured for this project - ignoring"
        else
          npx jest --ci --coverage --detectOpenHandles
          echo "coverageExists=true" >> "$GITHUB_OUTPUT"
        fi
      working-directory: ./
      shell: bash

    - name: Prepare SonarCloud
      if: steps.yarn-deps.outputs.no-yarn != 'true' && steps.test.outputs.coverageExists == 'true'
      run: |
        curl --include \
          --request POST \
          --header "Content-Type: application/x-www-form-urlencoded" \
          -u ${{ inputs.sonar-token }} \
          -d 'project=neohelden-${{ inputs.sonar-projectKey }}&organization=${{ inputs.sonar-organization }}&name=${{ inputs.sonar-projectKey }}' \
          'https://sonarcloud.io/api/projects/create'

        curl --include \
          --request POST \
          --header "Content-Type: application/x-www-form-urlencoded" \
          -u ${{ inputs.sonar-token }} \
          -d 'project=neohelden-${{ inputs.sonar-projectKey }}&name=${{ inputs.default-branch }}' \
          'https://sonarcloud.io/api/project_branches/rename'
      shell: bash

    - name: SonarCloud Scan
      if: steps.yarn-deps.outputs.no-yarn != 'true' && steps.test.outputs.coverageExists == 'true'
      uses: sonarsource/sonarcloud-github-action@master
      with:
        projectBaseDir: ${{ inputs.sonar-project-base-dir }}
        args: >
          -Dsonar.organization=${{ inputs.sonar-organization }}
          -Dsonar.projectKey=neohelden-${{ inputs.sonar-projectKey }}
          ${{ steps.extract_branch.outputs.branch }}
          -Dsonar.javascript.lcov.reportPaths=${{ inputs.sonar-lcov-reportpaths }}
          -Dsonar.sources=${{ inputs.sonar-sources }}
          -Dsonar.inclusions=${{ inputs.sonar-inclusions }}
          -Dsonar.exclusions=${{ inputs.sonar-exclusions }}
          -Dsonar.tests=${{ inputs.sonar-tests }}
          -Dsonar.test.exclusions=${{ inputs.sonar-test-exclusions }}
          -Dsonar.test.inclusions=${{ inputs.sonar-test-inclusions }}
          -Dsonar.coverage.exclusions=${{ inputs.sonar-coverage-exclusions }}
          -Dsonar.verbose=${{ inputs.sonar-verbose }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}
