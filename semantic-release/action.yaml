name: "semantic-release"
description: "Creates a Semantic Release"
inputs:
  checkout-ref:
    description: Ref to checkout from Git
    default: ${{ github.event.pull_request.head.sha }}
    required: false
  gh-app-id:
    description: Id of a Github App used to trigger follow-up Github Action workflows
    required: true
  gh-app-priv-key:
    description: Private key of a Github App used to trigger follow-up Github Action workflows
    required: true
  release-branch:
    description: Branch name where releases are built from
    required: false
    default: main
  release-extra-plugins:
    description: Comma separated list of extra plugins to load for the sematic-release package
    required: false
  npm-automation-token:
    description: Automation token for NPM to publish packages
    required: false
  tsconfig-build-file:
    description: tsconfig file used for building the project.
    default: tsconfig.build.json
    required: false
  dev-branch:
    description: The staging branch in this project. 
    default: develop
    required: false
  release-labels:
    description: A comma seperated list of labels to add to a release PR
    default: release
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
        ref: ${{ inputs.checkout-ref }}

    - uses: actions/setup-node@v2.4.0
      with:
        node-version: "14"

    - name: Build the Code
      run: |
        FILE=${{ inputs.tsconfig-build-file }}

        if [ $(jq -r .private package.json) = "false" ] && [ -f "$FILE" ]
        then
          npx tsc -p "$FILE"
        else
          echo "Project is private or $FILE does not exist - ignoring"
        fi
      working-directory: ./
      shell: bash

    - name: Install semantic-release
      shell: bash
      run: |
        sudo npm install -g \
          semantic-release@18.0.0 \
          @semantic-release/git@10.0.0 \
          @semantic-release/release-notes-generator@10.0.2 \
          @semantic-release/github@8.0.0

    - name: Install ${{ inputs.extra-plugins }}
      shell: bash
      run: |
        IFS=,
        PLUGINS=(${{inputs.release-extra-plugins}})
        for PLUGIN in ${PLUGINS[@]}; do
          sudo npm install -g ${PLUGIN};
        done

    # Releases created by the regular GITHUB_TOKEN will not trigger other actions, so we use a GitHub App instead.
    - id: generate_token
      uses: tibdex/github-app-token@v1.4.0
      with:
        app_id: ${{ inputs.gh-app-id }}
        private_key: ${{ inputs.gh-app-priv-key }}

    - shell: bash
      run: |
        IFS=,
        EXTRA_PLUGINS=(${{ inputs.release-extra-plugins }})
        PLUGINS=""
        for PLUGIN in ${EXTRA_PLUGINS[@]}; do
          PLUGINS="$PLUGINS,$PLUGIN";
        done
        semantic-release \
          --branches ${{ inputs.release-branch }} \
          --plugins "@semantic-release/commit-analyzer,@semantic-release/release-notes-generator,@semantic-release/git,@semantic-release/github${PLUGINS}" \
          --tag-format \${version} \
          --debug true
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        NPM_TOKEN: ${{ inputs.npm-automation-token }}
    
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6 # Not needed with a .ruby-version file
        bundler-cache: true

    - name: Create Release PR
      shell: bash
      run: |
        gem install --no-document git-pr-release

        if [ $GITHUB_EVENT_NAME = "push" ]; then
        git-pr-release
        fi
      env:
        GIT_PR_RELEASE_BRANCH_PRODUCTION: ${{ inputs.release-branch }}
        GIT_PR_RELEASE_BRANCH_STAGING: ${{ inputs.dev-branch }}
        GIT_PR_RELEASE_TOKEN: ${{ steps.generate_token.outputs.token }}
        GIT_PR_RELEASE_LABELS: ${{ inputs.release-labels }}
        GIT_PR_RELEASE_MENTION: author
