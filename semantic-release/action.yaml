name: "semantic-release"
description: "Creates a Semantic Release"
inputs:
  checkout-ref:
    description: Ref to checkout from Git
    default: ${{ github.event.pull_request.head.sha }}
    required: false
  gh-app-id:
    description: Id of a Github App used to trigger follow-up Github Action workflows
    required: true
  gh-app-private-key:
    description: Private key of a Github App used to trigger follow-up Github Action workflows
    required: true
  release-branch:
    description: Branch name where releases are built from
    required: false
    default: main,'+([0-9])?(.{+([0-9]),x}).x'
  main-branch:
    description: Branch name where the main code is checked out from
    required: false
    default: main
  release-prefix:
    description: "A prefix for the created release version"
    required: false
  release-extra-plugins:
    description: Comma separated list of extra plugins to load for the sematic-release package
    required: false
  release-extend-configuration:
    description: An npm package to extend the configuration with
    required: false
    default: ""
  npm-automation-token:
    description: Automation token for NPM to publish packages
    required: false
  tsconfig-build-file:
    description: tsconfig file used for building the project.
    default: tsconfig.build.json
    required: false
  dev-branch:
    description: The staging branch in this project.
    default: ${{ github.event.repository.default_branch }}
    required: false
  release-labels:
    description: A comma seperated list of labels to add to a release PR
    default: release
    required: false
  auto-merge-dependabot-enabled:
    description: "If true, the PR will be merged from dependabot"
    default: "false"
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
        ref: ${{ inputs.checkout-ref }}

    - uses: actions/setup-node@v2.4.0
      with:
        node-version: "20"

    - run: sudo apt-get install -y jq
      shell: bash

    - name: Build the Code
      run: |
        FILE=${{ inputs.tsconfig-build-file }}

        if [ $(jq -r .private package.json) = "false" ] && [ -f "$FILE" ]
        then
          yarn --frozen-lockfile -D;
          npx tsc -p "$FILE"
        else
          echo "Project is private or $FILE does not exist - ignoring"
        fi
      working-directory: ./
      shell: bash

    - name: Install semantic-release
      shell: bash
      run: |
        sudo npm install -g \
          semantic-release@19 \
          @semantic-release/git@10 \
          @semantic-release/release-notes-generator@10 \
          @semantic-release/github@8 \
          @semantic-release/exec@6

    - name: Install ${{ inputs.extra-plugins }} ${{ inputs.release-extend-configuration }}
      shell: bash
      run: |
        IFS=,
        PLUGINS=(${{inputs.release-extra-plugins}})
        if [ "${{ inputs.release-extend-configuration }}" != "" ]; then
          PLUGINS+=(${{ inputs.release-extend-configuration }})
        fi
        for PLUGIN in ${PLUGINS[@]}; do
          sudo npm install -g ${PLUGIN};
        done

    # Releases created by the regular GITHUB_TOKEN will not trigger other actions, so we use a GitHub App instead.
    - id: generate_token
      uses: tibdex/github-app-token@v1.4.0
      with:
        app_id: ${{ inputs.gh-app-id }}
        private_key: ${{ inputs.gh-app-private-key }}

    - name: Create semantic release
      shell: bash
      run: |
        IFS=,
        EXTRA_PLUGINS=(${{ inputs.release-extra-plugins }})
        PLUGINS=""
        for PLUGIN in ${EXTRA_PLUGINS[@]}; do
          PLUGINS="$PLUGINS,$PLUGIN";
        done
        EXTEND_CONFIGURATION=""
        if [ "${{ inputs.release-extend-configuration }}" != "" ]; then
          EXTEND_CONFIGURATION="-e ${{ inputs.release-extend-configuration }}"
        fi
        semantic-release \
          --branches ${{ inputs.release-branch }} \
          $EXTEND_CONFIGURATION \
          --plugins "@semantic-release/commit-analyzer,@semantic-release/release-notes-generator,@semantic-release/git,@semantic-release/github${PLUGINS}" \
          --tag-format ${{ inputs.release-prefix }}\${version} \
          --debug true
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        NPM_TOKEN: ${{ inputs.npm-automation-token }}

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3 # Not needed with a .ruby-version file
        bundler-cache: true

    - name: Create PR for next release
      shell: bash
      run: |
        # for scheduled runs we do not have the default_branch in the event
        if [ "${{ github.event.repository.default_branch }}"  == "" ] || [ "${{ github.event.repository.default_branch }}"  == "${GITHUB_REF#refs/*/}" ];then
          DEFAULT_BRANCH=
        else
          DEFAULT_BRANCH=,"${{ github.event.repository.default_branch }}"
        fi

        cat <<EOF > .releaserc.yaml
        branches: ["${GITHUB_REF#refs/*/}${DEFAULT_BRANCH}"]
        tagFormat: '${{ inputs.release-prefix }}\${version}'
        dryRun: true
        ci: true
        debug: true
        plugins:
          - '@semantic-release/commit-analyzer'
          - [
              '@semantic-release/exec',
              {
                'verifyReleaseCmd': "echo \${nextRelease.version} > version.txt",
              },
            ]
        EOF

        npx semantic-release --debug

        cat <<EOF > template.erb
        Release $(cat version.txt)
        <% pull_requests.each do |pr| -%>
        <%=  pr.to_checklist_item %>
        <% end -%>
        EOF

        if [ $GITHUB_EVENT_NAME = "push" ] && [ ${GITHUB_REF#refs/*/} = "${{ inputs.dev-branch }}" ] && [ "${{ inputs.dev-branch }}" != "${{ inputs.main-branch }}" ]; then
          gem install --no-document git-pr-release
          git-pr-release --no-fetch --squashed
        fi
      env:
        GIT_PR_RELEASE_BRANCH_PRODUCTION: ${{ inputs.main-branch }}
        GIT_PR_RELEASE_BRANCH_STAGING: ${{ inputs.dev-branch }}
        GIT_PR_RELEASE_TOKEN: ${{ steps.generate_token.outputs.token }}
        GIT_PR_RELEASE_LABELS: ${{ inputs.release-labels }}
        GIT_PR_RELEASE_MENTION: author
        GIT_PR_RELEASE_TEMPLATE: template.erb
        DEBUG: "true"

    - name: "Automerge (enabled: ${{ inputs.auto-merge-dependabot-enabled }})"
      uses: fastify/github-action-merge-dependabot@v3.0.0
      if: inputs.auto-merge-dependabot-enabled == 'true'
      with:
        github-token: ${{ steps.generate_token.outputs.token }}
        target: minor
