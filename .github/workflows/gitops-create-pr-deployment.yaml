name: "Create PR Deployment"
on:
  workflow_call:

    inputs:
      argo-host:
        description: ArgoCd host
        required: true
        type: string
      argo-base-app:
        description: ArgoCD app being used as base for deploying the built container image
        required: true
        type: string
      dev-gitops-base-branch:
        description: Branch within a gitops repositoriy used by ArgoCD
        required: false
        default: main
        type: string
      argocd-overlay-path:
        description: Path within the repository holding the kustomization.yaml of an OVERLAY_PATH
        required: true
        type: string
      k8s-version:
        description: Version of Kubernetes against which kube-score shall check
        type: string
        required: true

    secrets:
      image-registry-username:
        description: Username used to login at the image registry
        required: true
      image-registry-token:
        description: TOken use to login at the image registry
        required: true
      argocd-auth-token:
        description: Token for authenticating on ArgoCD host
        required: true
      github-token:
        description: Token used for accessing GitHub.com
        required: true
      private-key-robot-account:
        description: Private Key of a robot account for creating a token to access private repositories referenced within kustomization files
        required: true

env:
  ARGOCD_STATUS: "ArgoCD PR-Deployment"

jobs:
  kustomization:
    name: "Check kustomization"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup"
        uses: yokawasa/action-setup-kube-tools@v0.7.1
        with:
          kustomize: "4.4.0"
          kube-score: "1.13.0"

      - name: "Print versions"
        run: |
          kustomize version
          kube-score version

      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null
          ssh-add - <<< "${{ secrets.private-key-robot-account }}"

      - name: "kustomize build"
        run: |
          kustomize build ${{ inputs.argocd-overlay-path }}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          
      - name: "vars replaced"
        run: |
          kustomize build ${{ inputs.argocd-overlay-path }} | grep "\$(" && exit 1 || exit 0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: "properties replaced"
        run: |
          kustomize build "${{ inputs.argocd-overlay-path }}" | grep "KUSTOMIZE_ME" && exit 1 || exit 0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: "Kube-score"
        run: |
          ## TODO: check rules specified in kube-score.yaml only and fail if rules are not met
          kustomize build ${{ inputs.argocd-overlay-path }} | kube-score score --kubernetes-version "${{ inputs.k8s-version }}" --ignore-test pod-networkpolicy - && exit 0 || exit 0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  
  kustomize-diff:
    needs:
      - kustomization
    name: "kustomize diff"
    runs-on: ubuntu-latest
    env:
      HEAD_REF: ${{ github.head_ref }}
      BASE_REF: ${{ github.base_ref }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null
          ssh-add - <<< "${{ secrets.private-key-robot-account }}"

      - id: kustomize-diff
        run: |
          
          TMP_DIR="$(mktemp -d)"
          
          kustomizations=$(find . -maxdepth 4 -name kustomization.yaml -exec dirname {} \; | sort | uniq)

          function build {
            local ref="$1"
            printf "\n\nChecking out ref: %s\n" "$ref"
            git checkout "$ref" --quiet
            for envpath in $kustomizations; do
              local build_dir
              if ! [ -d "$envpath" ]; then continue; fi
              build_dir="$TMP_DIR/$ref/${envpath#*kustomize/}"
              printf "\n\nCreating build directory: %s\n" "$build_dir"
              mkdir -p "$build_dir"
              echo "Running kustomize"
              kustomize build "$envpath" -o "$build_dir"
            done
          }

          build "${{ env.HEAD_REF }}"
          build "${{ env.BASE_REF }}"

          set +e
          diff=$(git diff --no-index "$TMP_DIR/${{ env.BASE_REF }}" "$TMP_DIR/${{ env.HEAD_REF }}")
          set -e

          output=$(printf "\`\`\` diff\n%s\n\`\`\`\n" "$diff")
          escaped_output=${output//$'\n'/'%0A'}
          echo "::set-output name=diff::$escaped_output"
          printf "\n\nOutput: %s\n" "$escaped_output"          
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name }} == "pull_request"
        with:
          message: |
            **Kustomize Diff**
            <details>
              <summary>
              Extended diff
              </summary>
              
              ${{ steps.kustomize-diff.outputs.diff }}
            </details>

  deploy:
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    needs:
      - kustomization

    name: Deploy PR
    runs-on: ubuntu-latest

    env:
      ARGOCD_USERNAME: ""
      ARGOCD_PASSWORD: ""
      ARGOCD_AUTH_TOKEN: "${{ secrets.argocd-auth-token }}"
    
    container:
      image: registry.neohelden.com/internal/argocd-action:1.0.1
      credentials:
          username:  ${{ secrets.image-registry-username }}
          password: ${{ secrets.image-registry-token }}
      
    steps:    
      - name: "Create PR App"
        run: |
          /argocd create --update \
            -h ${{ inputs.argo-host }} \
            -u ${{ env.ARGOCD_USERNAME }} \
            -p ${{ env.ARGOCD_PASSWORD }} \
            -a ${{ inputs.argo-base-app }} \
            -b "${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" \
            -pr ${{ github.event.number }}
                   
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            --header 'authorization: Bearer ${{ secrets.github-token }}' \
            --header 'content-type: application/json' \
            --header 'accept: application/vnd.github.v3+json' \
            --data '{
              "state": "pending",
              "context": "${{ env.ARGOCD_STATUS }}",
              "description": "${{ inputs.argo-base-app }}-pr-${{ github.event.number }} available in Argocd UI -->",
              "target_url": "${{ inputs.argo-host }}/applications/${{ inputs.argo-base-app }}-pr-${{ github.event.number }}"
              }' \
            --fail
      
      - name: Wait-for-healthy"
        timeout-minutes: 15
        run: |
          /argocd wait-for-healthy \
            -h ${{ inputs.argo-host }} \
            -u ${{ env.ARGOCD_USERNAME }} \
            -p ${{ env.ARGOCD_PASSWORD }} \
            -a ${{ inputs.argo-base-app }} \
            -pr ${{ github.event.number }}

          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            --header 'authorization: Bearer ${{ secrets.github-token }}' \
            --header 'content-type: application/json' \
            --header 'accept: application/vnd.github.v3+json' \
            --data '{
              "state": "pending",
              "context": "${{ env.ARGOCD_STATUS }}",
              "description": "${{ inputs.argo-base-app }}-pr-${{ github.event.number }} became healthy...",
              "target_url": "${{ inputs.argo-host }}/applications/${{ inputs.argo-base-app }}-pr-${{ github.event.number }}"
              }' \
            --fail

      - name: Wait-for-sync"
        timeout-minutes: 5
        run: |
          /argocd wait-for-in-sync \
            -h ${{ inputs.argo-host }} \
            -u ${{ env.ARGOCD_USERNAME }} \
            -p ${{ env.ARGOCD_PASSWORD }} \
            -a ${{ inputs.argo-base-app }} \
            -pr ${{ github.event.number }} \
            -sha ${{ github.event.pull_request.head.sha }}

          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            --header 'authorization: Bearer ${{ secrets.github-token }}' \
            --header 'content-type: application/json' \
            --header 'accept: application/vnd.github.v3+json' \
            --data '{
              "state": "success",
              "context": "${{ env.ARGOCD_STATUS }}",
              "description": "Deployment of ${{ inputs.argo-base-app }}-pr-${{ github.event.number }} succeeced.",
              "target_url": "${{ inputs.argo-host }}/applications/${{ inputs.argo-base-app }}-pr-${{ github.event.number }}"
              }' \
            --fail

  finally:
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs: deploy
    steps:
    - name: set status failure
      run: |
        curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
          --header 'authorization: Bearer ${{ secrets.github-token }}' \
          --header 'content-type: application/json' \
          --header 'accept: application/vnd.github.v3+json' \
          --data '{
            "state": "failure",
            "context": "${{ env.ARGOCD_STATUS }}",
            "description": "Deployment of ${{ inputs.argo-base-app }}-pr-${{ github.event.number }} failed!",
            "target_url": "${{ inputs.argo-host }}/applications/${{ inputs.argo-base-app }}-pr-${{ github.event.number }}"
            }' \
          --fail
