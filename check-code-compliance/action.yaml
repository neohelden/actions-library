name: Check Code Compliance
description: Checks the code and dependencies for compliant licenses

inputs:
  checkout-ref:
    description: Ref to checkout from Git
    default: ${{ github.event.pull_request.head.sha }}
    required: false
  artifact-name:
    description: Name of the artifact. Default is derived from the repo name.
    required: false
    default: ${{ github.event.repository.name }}
  license-exclude-packages:
    description: Semicolon separated list of packages to exclude from the license check
    required: false
  audit-ci-config:
    description: Path to JSON config file used for configuring audit-ci (e.g. for allowing certain CVEs)
    default: "audit-ci.json"
    required: false
  repo-ssh-key:
    description: An SSH Key to load the repo https://github.com/neohelden/global-audit-ci-config
    required: false
  dependency-track-serverhostname:
    description: The hostname of the dependency-track server
    required: false
    default: dtrack.neohelden.com
  dependency-track-project-name:
    description: The name of the dependency-track project
    required: false
    default: ${{ github.event.repository.name }}
  dependency-track-project-version:
    description: The version of the dependency-track project
    required: false
    default: ${{ github.event.pull_request.head.sha }}
  dependency-track-apikey:
    description: The API key to use for the dependency-track server
    required: false
    default: ""

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.checkout-ref }}

    - name: Check if node project (package.json exists)
      shell: bash
      id: check_node
      run: |
        if [ ! -f package.json ]; then
          echo "No package.json found, skipping node check"
          echo "::set-output name=node-check-result::false"
          exit 0
        fi
        echo "::set-output name=node-project::true"

    - name: Copy spelling config
      shell: bash
      run: |
        cp "${{ github.action_path }}/cspell.json" ./.cspell.json
        cp "${{ github.action_path }}/.yamllint.yml" ./.yamllint.yml
        cp "${{ github.action_path }}/.mega-linter.yml" ./.mega-linter.yml

    - name: MegaLinter
      if: github.event_name == 'pull_request'
      id: ml
      # You can override MegaLinter flavor used to have faster performances
      # More info at https://megalinter.github.io/flavors/
      uses: megalinter/megalinter/flavors/javascript@v5
      env:
        # All available variables are described in documentation
        # https://megalinter.github.io/configuration/
        VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == github.event.repository.default_branch }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
        GITHUB_TOKEN: ${{ github.token }}
        TYPESCRIPT_DEFAULT_STYLE: prettier
        JAVASCRIPT_DEFAULT_STYLE: prettier
        DISABLE_ERRORS: "true"
    - name: Archive mega linter artifacts
      if: (success() || failure()) && github.event_name == 'pull_request'
      uses: actions/upload-artifact@v2
      with:
        name: MegaLinter reports
        path: |
          report
          mega-linter.log

    - name: Install dependencies
      run: yarn
      if: steps.check_node.outputs.node-project == 'true'
      working-directory: ./
      shell: bash

    - name: Load global audit-ci config
      shell: bash
      working-directory: /tmp
      if: steps.check_node.outputs.node-project == 'true'
      env:
        GIT_SSH_COMMAND: "ssh -i /tmp/audit_ci_key -o IdentitiesOnly=yes"
      run: |
        if [ -n "${{ inputs.repo-ssh-key }}" ]
        then
          echo "Getting global-audit-ci-config from git"
          echo "${{ inputs.repo-ssh-key }}" > /tmp/audit_ci_key
          chmod 600 /tmp/audit_ci_key
          git clone git@github.com:neohelden/global-audit-ci-config.git config;

          cd config
          commitMilliseconds=$(git log --format="%at" -- audit-ci.json)
          sevenDaysInThePast=$(date --date '- 7days' +%s)

          if [ "$(jq -r .allowlist $FILE)" != "null" ] && \
            [ "$(jq -r .allowlist $FILE)" != "[]" ] && \
            [[ $commitMilliseconds -lt $sevenDaysInThePast ]] && \
            exit
          then
            echo "Global audit file 'neohelden/global-audit-ci-config/audit-ci.json' is older than 7 days. Please review and amend!"
            exit 1
          fi
          # we are still in folder 'config/'
          cd ..

        else
          echo "Creating empty global config"
          mkdir config
          echo '{"allowlist":[]}' > config/audit-ci.json;
        fi

        mv config/audit-ci.json /tmp/common_audit_ci.json

    - name: Audit dependencies
      if: steps.check_node.outputs.node-project == 'true'
      run: |
        LOCAL_FILE=${{ inputs.audit-ci-config }}
        GLOBAL_FILE=/tmp/common_audit_ci.json
        MERGED_FILE=/tmp/audit_ci.rendered.json

        if [ -n "$LOCAL_FILE" ] && \
          [ -f "$LOCAL_FILE" ]
        then
          jq -n '{ allowlist: [ inputs.allowlist ] | add }' $LOCAL_FILE $GLOBAL_FILE > \
            $MERGED_FILE

          echo "Using audit-ci config: $(cat $MERGED_FILE)"

          npx audit-ci --high --config=$MERGED_FILE

          commitMilliseconds=$(git log --format="%at" -- $FILE)
          sevenDaysInThePast=$(date --date '- 7days' +%s)

          if [ "$(jq -r .allowlist $LOCAL_FILE)" != "null" ] && \
            [[ $commitMilliseconds -lt $sevenDaysInThePast ]] && \
            exit
          then
            echo "File $LOCAL_FILE is older than 7 days. Please review and amend!"
            exit 1
          fi
        else
          echo "Using audit-ci config: $(cat $GLOBAL_FILE)"
          npx audit-ci --high --config $GLOBAL_FILE
        fi

      shell: bash
      working-directory: ./

    - name: Check Licenses
      working-directory: ./
      shell: bash
      if: steps.check_node.outputs.node-project == 'true'
      run: |
        npx license-checker-rseidelsohn \
            --onlyAllow="Python-2.0; \
              MIT; \
              Apache-2.0; \
              BSD-3-Clause; \
              ISC; \
              MIT OR Apache-2.0; \
              BSD-2-Clause; \
              BSD;Apache*; \
              Apache 2.0; \
              Unlicense; \
              CC0-1.0; \
              Public Domain; \
              WTFPL; \
              CC-BY-4.0; \
              Unicode-DFS-2016; \
              VOL" \
            --excludePackages="@neohelden/eslint-config;${{ inputs.license-exclude-packages }}" \
            --excludePrivatePackages \
            --csv \
            --out licenses.csv

    - name: Upload license file
      uses: actions/upload-artifact@v2
      if: steps.check_node.outputs.node-project == 'true'
      with:
        name: Licenses - ${{ inputs.artifact-name }}
        path: ./licenses.csv
        retention-days: 30

    - name: Generate CycloneDX SBOM
      working-directory: ./
      if: steps.check_node.outputs.node-project == 'true'
      run: npx @cyclonedx/bom -o bom.xml
      shell: bash

    - name: Upload BOM to Dependency-Track
      uses: DependencyTrack/gh-upload-sbom@v1.0.0
      if: inputs.dependency-track-apikey != ''
      with:
        serverhostname: ${{ inputs.dependency-track-serverhostname }}
        projectname: ${{ inputs.dependency-track-project-name }}
        projectversion: ${{ inputs.dependency-track-project-version }}
        apiKey: ${{ inputs.dependency-track-apikey }}
        autocreate: true

    - name: Upload SBOM
      uses: actions/upload-artifact@v2
      if: steps.check_node.outputs.node-project == 'true'
      with:
        name: BOM - ${{ inputs.artifact-name }}
        path: ./bom.xml
        retention-days: 30
